{
    "sourceFile": "app/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733830363968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733830392692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -658,9 +658,9 @@\n   style={{ width: \"80%\", color: \"black\" }}\r\n >\r\n   {models.map((modelDir: string, index: number) => (\r\n     <option key={index} value={modelDir} disabled={index === 0}>\r\n-      {index === 0 ? `${modelDir} (модель пока не поддерживается)` : modelDir}\r\n+      {index === 0 ? `${modelDir} (model is not supported at the moment)` : modelDir}\r\n     </option>\r\n   ))}\r\n </select>\r\n                 <div className=\"mt-2\">\r\n"
                }
            ],
            "date": 1733830363968,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"tailwindcss/tailwind.css\";\r\n\r\nexport default function Home() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [modelUsed, setModelUsed] = useState<string | null>(null);\r\n  const [currentModel, setCurrentModel] = useState<string>(\"No model selected\");\r\n  const [modelDescription, setModelDescription] = useState<string | null>(null);\r\n  const [modelPhoto, setModelPhoto] = useState<string | null>(null);\r\n  const [imageSrc, setImageSrc] = useState(\"\"); // Initialize with the original image source\r\n  const [originalImageSrc, setOriginalImageSrc] = useState(\"\"); // Initialize with the original image source\r\n  const [resultedImageSrc, setResultedImageSrc] = useState(\"\"); // Initialize with an empty string\r\n  const [isOriginal, setIsOriginal] = useState(true);\r\n\r\n  const [isVideoThumbnail, setIsVideoThumbnail] = useState(false);\r\n\r\n  const [gifSrc, setGifSrc] = useState<string | null>(null);\r\n\r\n  const [serverStatus, setServerStatus] = useState<string | null>(null);\r\n  const [isLoadingServerStatus, setIsLoadingServerStatus] = useState<\r\n    boolean | null\r\n  >(null);\r\n  const [lastImageFile, setLastImageFile] = useState<File | null>(null);\r\n  const [isLoadingModel, setIsLoadingModel] = useState(true);\r\n\r\n  const [isLoadingModelData, setIsLoadingModelData] = useState(false);\r\n  const [namesString, setNamesString] = useState(\"\");\r\n  const [isResultReceived, setIsResultReceived] = useState(false);\r\n  interface Frame {\r\n    frame_number: number;\r\n    time_in_seconds: number;\r\n    annotated_image: string;\r\n    frame_results: any[];\r\n    detection_results: {\r\n      \"Total # of instances\": number;\r\n      Types: string[];\r\n      \"Total # of classes\": number;\r\n      \"Area by type\": Record<string, { area: number; area_percentage: number }>;\r\n      instances: Array<{\r\n        name: string;\r\n        area: number;\r\n        area_percentage: number;\r\n      }>;\r\n    };\r\n  }\r\n\r\n  interface Instance {\r\n    name: string;\r\n    area: number;\r\n    area_percentage: string;\r\n  }\r\n\r\n  interface DetectionResults {\r\n    \"Total # of instances\": number;\r\n    \"Total # of classes\": number;\r\n    \"Area by type\": Record<string, { area: number; area_percentage: string }>;\r\n    instances: Instance[];\r\n  }\r\n\r\n  interface DetectionSummary {\r\n    \"Total # of instances\": number;\r\n    \"Total # of classes\": number;\r\n    \"Total area by type\": Record<string, { area: number }>;\r\n    \"Average % area by type\": Record<string, { percentage_area: string }>;\r\n  }\r\n  interface DataType {\r\n    type: string;\r\n    image: string;\r\n    model_used: string;\r\n    frames?: Frame[];\r\n    detection_results?: DetectionResults;\r\n    detection_summary?: DetectionSummary;\r\n  }\r\n  interface Image {\r\n    filename: string;\r\n    is_video: boolean;\r\n    thumbnail?: string;\r\n  }\r\n\r\n  const [sharedImages, setSharedImages] = useState<Image[]>([]);\r\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\r\n  const [data, setData] = useState<DataType | null>(null);\r\n\r\n  const [currentImage, setCurrentImage] = useState<string | null>(null);\r\n\r\n  const [currentMediaIndex, setCurrentMediaIndex] = useState<number | null>(\r\n    null\r\n  );\r\n\r\n  const imageInputRef = React.useRef<HTMLInputElement>(null);\r\n  const [projectStructure, setProjectStructure] = useState<any>(null);\r\n\r\n  const [isUploadPopupOpen, setIsUploadPopupOpen] = useState(false);\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  const [models, setModels] = useState<string[]>([]);\r\n  const [diskContent, setDiskContent] = useState<string[]>([]);\r\n\r\n  const SERVER_URL = process.env.SERVER_URL;\r\n\r\n  const GETMODELS_URL = `${SERVER_URL}/models`;\r\n  const PREDICT_URL = `${SERVER_URL}/predict`;\r\n  const UPLOAD_MODEL_URL = `${SERVER_URL}/upload_model`;\r\n  const CURRENT_MODEL_URL = `${SERVER_URL}/current_model`;\r\n  const DOWNLOAD_MODEL_URL = `${SERVER_URL}/download_model`;\r\n  const SHARED_IMAGES_URL = `${SERVER_URL}/shared_images`;\r\n  const SELECT_MODEL_URL = `${SERVER_URL}/select_model`;\r\n  const MODEL_INFO_URL = `${SERVER_URL}/model_info/`;\r\n\r\n  const fetchModels = async () => {\r\n    try {\r\n      const response = await fetch(GETMODELS_URL, {\r\n        credentials: \"include\", // Include cookies\r\n      });\r\n\r\n      const { models: modelDirs } = await response.json();\r\n      setModels(modelDirs);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch models:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchSharedImages = async () => {\r\n    try {\r\n      const response = await fetch(SHARED_IMAGES_URL, {\r\n        credentials: \"include\", // Include cookies\r\n      });\r\n      const data = await response.json();\r\n      setSharedImages(data.images);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch shared images:\", error);\r\n    }\r\n  };\r\n\r\n  function getVideoThumbnail(file: Blob) {\r\n    return new Promise((resolve, reject) => {\r\n      // Create a video element\r\n      const video = document.createElement(\"video\");\r\n\r\n      // When the metadata has been loaded, set the time to the thumbnail frame time\r\n      video.onloadedmetadata = function () {\r\n        video.currentTime = 0;\r\n      };\r\n\r\n      // When the video has seeked to the correct time, draw the frame on a canvas\r\n      video.onseeked = function () {\r\n        // Create a canvas and draw the video frame on it\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = video.videoWidth;\r\n        canvas.height = video.videoHeight;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        if (!ctx) {\r\n          reject(\"Could not create 2D context\");\r\n          return;\r\n        }\r\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n        // Convert the canvas to a data URL\r\n        const thumbnail = canvas.toDataURL(\"image/jpeg\");\r\n\r\n        // Resolve the promise with the thumbnail\r\n        resolve(thumbnail);\r\n      };\r\n\r\n      // Set the video source\r\n      video.src = URL.createObjectURL(file);\r\n\r\n      // Catch any errors\r\n      video.onerror = function (err) {\r\n        reject(err);\r\n      };\r\n    });\r\n  }\r\n\r\n  const resetPage = () => {\r\n    setIsResultReceived(false);\r\n    setCurrentImage(null);\r\n    setGifSrc(null);\r\n  }\r\n\r\n  const handlePredict = async () => {\r\n    if (!currentImage && currentMediaIndex === null) {\r\n      setError(\"No image or media selected for prediction.\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setData(null);\r\n    setError(null);\r\n\r\n    setIsResultReceived(false);\r\n\r\n    try {\r\n      let formData = new FormData();\r\n\r\n      if (currentMediaIndex !== null) {\r\n        // If currentMediaIndex is not null, it's an index in sharedImages\r\n        formData.append(\"mediaIndex\", currentMediaIndex.toString());\r\n      } else if (uploadedFile) {\r\n        // If uploadedFile is not null, it's an uploaded image or video\r\n        let blob = uploadedFile;\r\n        let extension = \"\";\r\n        let type = \"\";\r\n        if (blob.type === \"image/jpeg\") {\r\n          extension = \".jpg\";\r\n          type = \"image\";\r\n        } else if (blob.type === \"image/png\") {\r\n          extension = \".png\";\r\n          type = \"image\";\r\n        } else if (blob.type === \"video/mp4\") {\r\n          extension = \".mp4\";\r\n          type = \"video\";\r\n        }\r\n\r\n        const filename = `file${extension}`;\r\n        formData.append(\"file\", blob, filename);\r\n        formData.append(\"type\", type);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n      const predictResponse = await fetch(PREDICT_URL, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        credentials: \"include\", // Include cookies\r\n\r\n      });\r\n\r\n\r\n      console.log(\"3\");\r\n      if (!predictResponse.ok) {\r\n        throw new Error(`HTTP error! status: ${predictResponse.status}`);\r\n      }\r\n\r\n      const responseData = await predictResponse.json();\r\n      console.log(responseData);\r\n      if (responseData.type === \"image\") {\r\n        setModelUsed(responseData.model_used); // Store the model used in state\r\n        setData(responseData);\r\n      } else if (responseData.type === \"video\") {\r\n\r\n        if (responseData.gif) {\r\n          setGifSrc(`data:image/gif;base64,${responseData.gif}`);\r\n        }\r\n        // Handle video results\r\n        // responseData.results is now an array of objects, each with a 'frame', 'results', and 'annotated_image' property\r\n        setData(responseData);\r\n        setModelUsed(responseData.model_used); // Store the model used in state\r\n      }\r\n\r\n      // Assuming responseData.image is the base64 encoded image\r\n      const base64Image = `data:image/jpeg;base64,${responseData.image}`;\r\n\r\n      // Store the original image source before making the prediction\r\n      if (currentImage) {\r\n        setOriginalImageSrc(currentImage);\r\n      }\r\n\r\n      setResultedImageSrc(base64Image);\r\n      setImageSrc(base64Image);\r\n      setIsOriginal(false);\r\n\r\n      setData(responseData); // Set data to the response data\r\n      setIsResultReceived(true);\r\n\r\n      // Assuming the response data has a property 'image' which holds the image data\r\n    } catch (error) {\r\n      console.error();\r\n      let errorMessage = \"An error occurred\";\r\n      if (error instanceof Error) {\r\n        errorMessage = error.message;\r\n      }\r\n      setError(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n\r\n      setError(null);\r\n    }\r\n  };\r\n\r\n  const toggleImage = () => {\r\n    if (isOriginal) {\r\n      setImageSrc(resultedImageSrc); // Replace with the resulted image source\r\n    } else {\r\n      setImageSrc(originalImageSrc); // Replace with the original image source\r\n    }\r\n    setIsOriginal(!isOriginal);\r\n  };\r\n\r\n/*   const fetchProjectStructure = async () => {\r\n    try {\r\n      const response = await fetch(`${SERVER_URL}/project_structure`);\r\n      const data = await response.json();\r\n      setProjectStructure(data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch project structure:', error);\r\n    }\r\n  }; */\r\n\r\n  const handleMediaUpload = async (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    if (event.target?.files?.[0]) {\r\n      const file = event.target.files[0];\r\n      const fileExtension = file.name.split(\".\").pop()?.toLowerCase();\r\n\r\n      // Check if the file size is over 10MB\r\n      if (file.size > 10 * 1024 * 1024) {\r\n        setError(\"File size should not exceed 10MB.\");\r\n        return;\r\n      }\r\n\r\n      setLastImageFile(file);\r\n      setCurrentMediaIndex(null);\r\n      setError(null);\r\n\r\n      // If the file is a video, create a thumbnail and set it as the current image\r\n      if (fileExtension === \"mp4\") {\r\n        try {\r\n          const thumbnail = await getVideoThumbnail(file);\r\n          setCurrentImage(thumbnail as string);\r\n          setIsVideoThumbnail(true); // Set isVideoThumbnail to true\r\n        } catch (err) {\r\n          console.error(\"Failed to create video thumbnail:\", err);\r\n        }\r\n      } else {\r\n        setIsVideoThumbnail(false);\r\n        const readerForDisplay = new FileReader();\r\n        readerForDisplay.onload = (e) => {\r\n          // Set the uploaded image as the current image\r\n          setCurrentImage(e.target?.result as string);\r\n        };\r\n        readerForDisplay.readAsDataURL(file);\r\n      }\r\n\r\n      setUploadedFile(file);\r\n    }\r\n  };\r\n\r\n  const handleModelChange = async (\r\n    event: React.ChangeEvent<HTMLSelectElement>\r\n  ) => {\r\n    setIsLoadingModelData(true);\r\n    let selectedModel = event.target.value;\r\n\r\n    console.log(selectedModel);\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${SELECT_MODEL_URL}?model_name=${encodeURIComponent(selectedModel)}`,\r\n        {\r\n          method: \"POST\",\r\n          credentials: \"include\",\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(data.message);\r\n      setCurrentModel(selectedModel);\r\n      await fetchModels();\r\n      console.log(selectedModel);\r\n      fetchModelInfo(selectedModel); // Update currentModel with selectedModel\r\n    } catch (error) {\r\n      console.error(\"Failed to select model:\", error);\r\n    }\r\n    setIsLoadingModelData(false);\r\n  };\r\n\r\n  const fetchModelInfo = async (modelName: string) => {\r\n    try {\r\n      const response = await fetch(\r\n        `${MODEL_INFO_URL}${encodeURIComponent(modelName)}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setModelDescription(data.description);\r\n      if (data.photo_url) {\r\n        setModelPhoto(`${SERVER_URL}${data.photo_url}`);\r\n      } else {\r\n        setModelPhoto(null);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch model info:\", error);\r\n    }\r\n  };\r\n\r\n  const handleModelUpload = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    const modelFileInput = event.currentTarget.elements.namedItem(\r\n      \"model_file\"\r\n    ) as HTMLInputElement;\r\n    const modelFile = modelFileInput.files?.[0];\r\n    const modelFileExtension = modelFile?.name.split(\".\").pop()?.toLowerCase();\r\n\r\n    if (modelFile && modelFileExtension !== \"pt\") {\r\n      setError(\"Only .pt files are accepted for the model.\");\r\n      modelFileInput.value = \"\"; // Clear the file input\r\n      return;\r\n    }\r\n\r\n    const photoFileInput = event.currentTarget.elements.namedItem(\r\n      \"photo\"\r\n    ) as HTMLInputElement;\r\n    const photoFile = photoFileInput.files?.[0];\r\n    const photoFileExtension = photoFile?.name.split(\".\").pop()?.toLowerCase();\r\n\r\n    if (\r\n      photoFile &&\r\n      photoFileExtension !== \"jpg\" &&\r\n      photoFileExtension !== \"png\"\r\n    ) {\r\n      setError(\"Only JPG and PNG images are accepted for the photo.\");\r\n      photoFileInput.value = \"\"; // Clear the file input\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData(event.currentTarget);\r\n    formData.append(\"description\", description);\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      console.log(\"Sending model to server...\");\r\n      const response = await fetch(UPLOAD_MODEL_URL, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        credentials: \"include\", // Include cookies\r\n      });\r\n\r\n      // Get the model name from the response\r\n      const data = await response.json();\r\n      console.log(\"Response data:\", data);\r\n      if (data.model_name) {\r\n        console.log(\"Model name:\", data.model_name);\r\n        setCurrentModel(data.model_name);\r\n        console.log(\"Current model:\", currentModel);\r\n\r\n        // Select the uploaded model\r\n        await handleModelChange({\r\n          target: { value: data.model_name },\r\n        } as React.ChangeEvent<HTMLSelectElement>);\r\n      }\r\n\r\n      // Fetch the models\r\n      await fetchModels();\r\n    } catch (error) {\r\n      let errorMessage = \"An error occurred\";\r\n      if (error instanceof Error) {\r\n        errorMessage = error.message;\r\n      }\r\n      setError(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setIsUploadPopupOpen(false); // Close the popup\r\n    }\r\n  };\r\n\r\n  // This function fetches the current model from the server\r\n  const getCurrentModel = async () => {\r\n    setIsLoadingModel(true);\r\n    const response = await fetch(CURRENT_MODEL_URL, {\r\n      credentials: \"include\", // Include cookies\r\n    });\r\n    const data = await response.json();\r\n    if (data.model_used) {\r\n      setCurrentModel(data.model_used);\r\n      // Fetch the model info for the current model\r\n      fetchModelInfo(data.model_used);\r\n    } else {\r\n      setCurrentModel(\"No model selected\");\r\n    }\r\n    setIsLoadingModel(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCurrentModel();\r\n  }, []);\r\n\r\n  const downloadModel = () => {\r\n    window.location.href = DOWNLOAD_MODEL_URL;\r\n  };\r\n\r\n  useEffect(() => {}, [currentModel]);\r\n\r\n  useEffect(() => {\r\n    fetchModels();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchSharedImages();\r\n  }, []);\r\n\r\n  // Check server status when the page loads\r\n  useEffect(() => {\r\n    setIsLoadingServerStatus(true);\r\n\r\n    const timeout = new Promise((_, reject) =>\r\n      setTimeout(() => reject(new Error(\"Request timed out\")), 5000)\r\n    );\r\n\r\n    const request = fetch(CURRENT_MODEL_URL)\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          setServerStatus(\"online\");\r\n        } else {\r\n          setServerStatus(\"offline\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setError(\"Failed to check server status: \" + error.message);\r\n      });\r\n\r\n    Promise.race([request, timeout])\r\n      .catch((error) => {\r\n        setError(\"Failed to check server status: \" + error.message);\r\n        setServerStatus(\"offline\");\r\n      })\r\n      .finally(() => {\r\n        setIsLoadingServerStatus(false);\r\n      });\r\n  }, [CURRENT_MODEL_URL]);\r\n\r\n  const getServerStatusColor = () => {\r\n    if (isLoadingServerStatus) return \"yellow\";\r\n    if (serverStatus === \"online\") return \"lightgreen\";\r\n    return \"red\";\r\n  };\r\n\r\n  const getServerStatusText = () => {\r\n    if (isLoadingServerStatus) return \"Loading server status...\";\r\n    if (serverStatus === \"online\") return \"Online\";\r\n    return \"Offline, or out of memory. Try reloading in a minute.\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 mb-32\">\r\n      <div className=\"flex flex-col my-4\">\r\n        <h1 className=\"text-4xl font-bold my-2\">Landscape types YOLO tester</h1>\r\n        <p>Run your landscape image or video through a YOLO model</p>\r\n      </div>\r\n      {!isResultReceived && !isLoading && (\r\n        <div className=\"container mx-auto \">\r\n          {isLoadingServerStatus === null ? null : (\r\n            <p style={{ color: getServerStatusColor() }}>\r\n              Server: {getServerStatusText()}\r\n            </p>\r\n          )}\r\n\r\n          {isUploadPopupOpen && (\r\n            <div className=\"fixed z-10 inset-0 overflow-y-auto flex items-center justify-center \">\r\n              <div className=\"bg-gray-500 bg-opacity-75 fixed inset-0\"></div>\r\n\r\n              <div\r\n                className=\"bg-gray-900 rounded-lg text-left text-white overflow-hidden shadow-xl transform transition-all sm:w-full sm:max-w-lg border-2 \"\r\n                role=\"dialog\"\r\n                aria-modal=\"true\"\r\n                aria-labelledby=\"modal-headline\"\r\n              >\r\n                <div className=\" p-4 sm:p-6\">\r\n                  <h3 className=\"text-lg leading-6 font-medium \">\r\n                    Upload a new model\r\n                  </h3>\r\n                  {error && <p className=\"text-red-500\">{error}</p>}\r\n                  <form onSubmit={handleModelUpload} className=\"mt-4\">\r\n                    <div>\r\n                      <label\r\n                        htmlFor=\"model-file\"\r\n                        className=\"block text-sm font-medium text-gray-400\"\r\n                      >\r\n                        Model file (.pt):\r\n                      </label>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"model-file\"\r\n                        name=\"model_file\"\r\n                        required\r\n                        className=\"mt-1 block w-full\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"mt-4\">\r\n                      <label\r\n                        htmlFor=\"photo\"\r\n                        className=\"block text-sm font-medium text-gray-400\"\r\n                      >\r\n                        Photo (optional):\r\n                      </label>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"photo\"\r\n                        name=\"photo\"\r\n                        className=\"mt-1 block w-full\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"mt-4\">\r\n                      <label\r\n                        htmlFor=\"description\"\r\n                        className=\"block text-sm font-medium text-gray-400\"\r\n                      >\r\n                        Description (optional):\r\n                      </label>\r\n                      <textarea\r\n                        id=\"description\"\r\n                        name=\"description\"\r\n                        value={description}\r\n                        onChange={(e) => setDescription(e.target.value)}\r\n                        className=\"mt-1 block w-full border text-black border-gray-300 rounded-md\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"mt-4 flex justify-end\">\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => setIsUploadPopupOpen(false)}\r\n                        className=\"mr-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\r\n                      >\r\n                        Cancel\r\n                      </button>\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"text-sm font-medium text-white bg-teal-700 hover:bg-teal-900  px-4 py-2 rounded \"\r\n                      >\r\n                        Upload\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <hr className=\"my-4 border-gray-700\" />\r\n\r\n          <div className=\"flex flex-col\">\r\n            <div className=\"flex flex-col md:flex-row\">\r\n              <div className=\"w-full md:w-1/2 p-2\">\r\n                <p className=\"text-xl mt-2\">Select a Model (2.7 is not supported at the moment)</p>\r\n                <select\r\n  id=\"model-select\"\r\n  onChange={async (event) => await handleModelChange(event)}\r\n  disabled={isLoading}\r\n  value={currentModel}\r\n  style={{ width: \"80%\", color: \"black\" }}\r\n>\r\n  {models.map((modelDir: string, index: number) => (\r\n    <option key={index} value={modelDir} disabled={index === 0}>\r\n      {index === 0 ? `${modelDir} (модель пока не поддерживается)` : modelDir}\r\n    </option>\r\n  ))}\r\n</select>\r\n                <div className=\"mt-2\">\r\n                  <h2>Description</h2>\r\n                  <p>\r\n                    {isLoadingModelData\r\n                      ? \"Loading model description...\"\r\n                      : modelDescription || \"No model description\"}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <div className=\"w-full md:w-1/2 p-2 flex flex-col items-center\">\r\n                {isLoadingModelData ? (\r\n                  <p>Loading model image...</p>\r\n                ) : modelPhoto && modelPhoto.trim() !== \"\" ? (\r\n                  <div>\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                      <img\r\n                        src={modelPhoto}\r\n                        alt=\"Model image\"\r\n                        style={{ maxHeight: \"400px\" }}\r\n                      />\r\n                    </div>\r\n                    <button\r\n                      onClick={downloadModel}\r\n                      className=\"bg-teal-700 hover:bg-teal-900 text-white py-2 px-4 rounded mt-4\"\r\n                    >\r\n                      Download model\r\n                    </button>\r\n                  </div>\r\n                ) : (\r\n                  <p>No model photo</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n            {/* <div className=\"flex flex-col items-end max-w-1/2\">\r\n            <p>Current model: </p>{\" \"}\r\n            <p className=\"text-white font-bold\">\r\n              {isLoadingModel ? \"Loading model...\" : currentModel}\r\n            </p>\r\n            <a\r\n              href=\"https://drive.google.com/drive/folders/1IY27vNFNr5GC9clNgasYnij9ssSd84yV\"\r\n              className=\"text-blue-500 hover:underline mt-2\"\r\n            >\r\n              Source\r\n            </a> */}{\" \"}\r\n            {/* Replace \"/your-link-path\" and \"Your Link Text\" with your actual link and text */}\r\n            {/*  <button\r\n              onClick={downloadModel}\r\n              className=\"bg-teal-700 hover:bg-teal-900 text-white py-2 px-4 rounded mt-4\"\r\n            >\r\n              Download model\r\n            </button> */}\r\n            {/* </div> */}\r\n            {/* </div> */}\r\n          </div>\r\n\r\n          {/* {error && <p style={{ color: \"red\" }}>Error: {error}</p>} */}\r\n\r\n          <button\r\n            onClick={() => setIsUploadPopupOpen(true)}\r\n            className=\"bg-teal-700 hover:bg-teal-900 text-white py-2 px-4 rounded mt-4\"\r\n          >\r\n            Upload a new model\r\n          </button>\r\n\r\n          {/*     <input\r\n        type=\"file\"\r\n        id=\"model-input\"\r\n        onChange={handleModelChangeUpload}\r\n        disabled={isLoading}\r\n        ref={fileInputRef}\r\n      /> */}\r\n\r\n          <hr className=\"my-4 border-gray-700\" />\r\n          <p className=\"text-xl mt-2\">Select an image/video for prediction</p>\r\n          <div className=\"flex flex-col md:flex-row items-start\">\r\n            <div className=\"w-full md:w-1/2\">\r\n              <div className=\"flex flex-col mt-4\">\r\n                <div className=\"flex flex-row flex-wrap\">\r\n                  {sharedImages.map((image, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={`relative w-32 h-32 m-2 transition duration-500 ease-in-out transform hover:scale-105 hover:opacity-50\r\n                    ${\r\n                      currentMediaIndex === index\r\n                        ? \"border-4 border-teal-500\"\r\n                        : \"\"\r\n                    }`}\r\n                      onClick={() => {\r\n                        const mediaIndex = index;\r\n                        setCurrentMediaIndex(mediaIndex);\r\n                        setIsVideoThumbnail(image.is_video); // Set isVideoThumbnail to true if the image is a video\r\n                        setCurrentImage(\r\n                          `${SERVER_URL}/${\r\n                            image.is_video\r\n                              ? \"shared_thumbnails\"\r\n                              : \"shared_images\"\r\n                          }/${\r\n                            image.is_video ? image.thumbnail : image.filename\r\n                          }`\r\n                        );\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src={`${SERVER_URL}/${\r\n                          image.is_video ? \"shared_thumbnails\" : \"shared_images\"\r\n                        }/${image.is_video ? image.thumbnail : image.filename}`}\r\n                        alt={image.filename}\r\n                        className={`object-cover w-full h-full ${\r\n                          image.is_video ? \"filter brightness-50\" : \"\"\r\n                        }`}\r\n                      />\r\n                      {image.is_video && (\r\n                        <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                          <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            fill=\"currentColor\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            stroke=\"currentColor\"\r\n                            className=\"w-12 h-12 text-white\"\r\n                          >\r\n                            <path\r\n                              strokeLinecap=\"round\"\r\n                              strokeLinejoin=\"round\"\r\n                              strokeWidth={2}\r\n                              d=\"M6 4v16l15-8-15-8z\"\r\n                            />\r\n                          </svg>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex flex-col mt-4\">\r\n                <p className=\"text-xl mt-2\">Or upload a new image/video</p>\r\n                <div className=\"flex justify-between items-start mt-2\">\r\n                  <div>\r\n                    <input\r\n                      type=\"file\"\r\n                      id=\"image-input\"\r\n                      onChange={handleMediaUpload}\r\n                      disabled={isLoading}\r\n                      ref={imageInputRef}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"w-full md:w-1/2 mt-5 flex flex-col items-start md:flex-grow \">\r\n              {currentImage && (\r\n                <>\r\n                  <img\r\n                    src={currentImage}\r\n                    alt=\"Current\"\r\n                    className={`object-contain w-full h-full ${\r\n                      isVideoThumbnail ? \"filter brightness-50\" : \"\"\r\n                    }`}\r\n                  />\r\n                  {isVideoThumbnail && (\r\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke=\"currentColor\"\r\n                        className=\"w-12 h-12 text-white\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth={2}\r\n                          d=\"M6 4v16l15-8-15-8z\"\r\n                        />\r\n                      </svg>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n              {currentImage ? (\r\n                <button\r\n                  onClick={handlePredict}\r\n                  className=\"bg-teal-700 hover:bg-teal-900 text-white py-2 px-4 rounded mt-4\"\r\n                >\r\n                  Predict\r\n                </button>\r\n              ) : (\r\n                <p>Select or upload an image for prediction</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n            {/* <div className=\"flex flex-col mt-4\">\r\n        <p className=\"text-xl mt-2\">Check structure</p>\r\n\r\n      <button onClick={fetchProjectStructure}>\r\n  Fetch Project Structure\r\n</button>\r\n<pre>{JSON.stringify(projectStructure, null, 2)}</pre>\r\n\r\n<button onClick={fetchDiskContent}>\r\n  Fetch Disk Content\r\n</button>\r\n// Display the disk content in a text element\r\n<pre>{JSON.stringify(diskContent, null, 2)}</pre>\r\n</div> */}\r\n        </div>\r\n      )}\r\n      {(isLoading || isResultReceived) && (\r\n        <div className=\"container mx-auto my-2\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"text-sm font-medium text-white bg-teal-700 hover:bg-teal-900 px-4 py-2 rounded\"\r\n            onClick={() => {\r\n              resetPage();\r\n            }}\r\n          >\r\n            &#8592; Back\r\n          </button>\r\n\r\n          {isLoading && (\r\n            <div className=\"flex justify-center items-center\">\r\n              <div className=\"loader mt-12\"></div>\r\n            </div>\r\n          )}\r\n          {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\r\n\r\n          {isResultReceived && (\r\n            <div>\r\n              <hr className=\"my-4 border-gray-700\" />\r\n              <p className=\"text-xl mt-2\">Result</p>\r\n\r\n              <p className=\"mb-2\">Model used: {modelUsed}</p>\r\n\r\n              <div className=\"flex flex-col\">\r\n                <div>\r\n                  <div>\r\n                    <table style={{ tableLayout: \"fixed\" }}>\r\n                      <thead>\r\n                        <tr>\r\n                          <th\r\n                            style={{ textAlign: \"start\", paddingRight: \"20px\" }}\r\n                          >\r\n                            Total instances\r\n                          </th>\r\n                          <th style={{ textAlign: \"start\" }}>\r\n                            {data?.type === \"image\"\r\n                              ? data?.detection_results?.[\r\n                                  \"Total # of instances\"\r\n                                ]\r\n                              : data?.detection_summary?.[\r\n                                  \"Total # of instances\"\r\n                                ]}\r\n                          </th>\r\n                        </tr>\r\n                        <tr>\r\n                          <th\r\n                            style={{ textAlign: \"start\", paddingRight: \"20px\" }}\r\n                          >\r\n                            Total classes\r\n                          </th>\r\n                          <th style={{ textAlign: \"start\" }}>\r\n                            {data?.type === \"image\"\r\n                              ? data?.detection_results?.[\"Total # of classes\"]\r\n                              : data?.detection_summary?.[\"Total # of classes\"]}\r\n                          </th>\r\n                        </tr>\r\n                      </thead>\r\n                    </table>\r\n                    {data?.type === \"video\" && (\r\n                      <div className=\"mt-4\">\r\n                        <h2>Summary for {data?.frames?.length} frames</h2>\r\n                        <table style={{ tableLayout: \"fixed\", width: \"100%\" }}>\r\n                          <thead>\r\n                            <tr>\r\n                              <th style={{ textAlign: \"start\" }}>Type</th>\r\n                              <th style={{ textAlign: \"start\" }}>\r\n                                Average Area\r\n                              </th>\r\n                              <th style={{ textAlign: \"start\" }}>\r\n                                Average % Area\r\n                              </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {Object.entries(\r\n                              data?.detection_summary?.[\r\n                                \"Average % area by type\"\r\n                              ] ?? {}\r\n                            ).map(([key, value], index) => (\r\n                              <tr key={index}>\r\n                                <td style={{ textAlign: \"start\" }}>{key}</td>\r\n                                <td style={{ textAlign: \"start\" }}>\r\n                                  {\r\n                                    data?.detection_summary?.[\r\n                                      \"Total area by type\"\r\n                                    ][key].area\r\n                                  }\r\n                                </td>\r\n                                <td style={{ textAlign: \"start\" }}>\r\n                                  {value.percentage_area}\r\n                                </td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div className=\"md:flex mt-4\">\r\n                  <div className=\"w-full md:w-1/2\">\r\n                    {data?.type === \"image\" && (\r\n                      <div>\r\n                        <h2 className=\"mb-2\">Area by instance</h2>\r\n                        <table style={{ tableLayout: \"fixed\", width: \"100%\" }}>\r\n                          <thead>\r\n                            <tr>\r\n                              <th style={{ textAlign: \"start\" }}>Instance</th>\r\n                              <th style={{ textAlign: \"start\" }}>Total</th>\r\n                              <th style={{ textAlign: \"start\" }}>%</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {data.detection_results?.instances?.map(\r\n                              (result, index) => (\r\n                                <tr key={index}>\r\n                                  <td style={{ textAlign: \"start\" }}>\r\n                                    {result.name}\r\n                                  </td>\r\n                                  <td style={{ textAlign: \"start\" }}>\r\n                                    {result.area}\r\n                                  </td>\r\n                                  <td style={{ textAlign: \"start\" }}>\r\n                                    {result.area_percentage}\r\n                                  </td>\r\n                                </tr>\r\n                              )\r\n                            )}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  {data?.type === \"image\" && (\r\n                    <div className=\"w-full md:w-1/2\">\r\n                      <h2 className=\"mb-2\">Area by class</h2>\r\n                      <table style={{ tableLayout: \"fixed\", width: \"100%\" }}>\r\n                        <thead>\r\n                          <tr>\r\n                            <th style={{ textAlign: \"start\" }}>Class</th>\r\n                            <th style={{ textAlign: \"start\" }}>Total</th>\r\n                            <th style={{ textAlign: \"start\" }}>%</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {Object.entries(\r\n                            data?.detection_results?.[\"Area by type\"] || {}\r\n                          ).map(([key, value], index) => (\r\n                            <tr key={index}>\r\n                              <td style={{ textAlign: \"start\" }}>{key}</td>\r\n                              <td style={{ textAlign: \"start\" }}>\r\n                                {value.area}\r\n                              </td>\r\n                              <td style={{ textAlign: \"start\" }}>\r\n                                {value.area_percentage}\r\n                              </td>\r\n                            </tr>\r\n                          ))}\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"mt-2\">\r\n                <div className=\"mt-4\">\r\n                  {data?.type === \"image\" && (\r\n                    <div>\r\n                      <hr className=\"my-4 border-gray-700\" />\r\n                      <button\r\n                        onClick={toggleImage}\r\n                        className=\"text-sm font-medium text-white bg-teal-700 hover:bg-teal-900  px-4 py-2 rounded \"\r\n                      >\r\n                        {isOriginal ? \"Show Result\" : \"Show Original\"}\r\n                      </button>\r\n                      <img\r\n                        src={imageSrc}\r\n                        alt=\"Processed\"\r\n                        className=\"w-full h-full mt-4 object-contain\"\r\n                      />\r\n                    </div>\r\n                  )}\r\n\r\n                  {data?.type === \"video\" && (\r\n                    <div className=\"flex flex-wrap\">\r\n                      <h2 className=\"mt-2\">Animated</h2>\r\n                      <div className=\" w-full flex justify-center\">\r\n\r\n                      {gifSrc && <img src={gifSrc} alt=\"Result GIF\" />}\r\n                      </div>\r\n                      <div className=\" w-full flex\">\r\n                      <h2 className=\"mt-2\">Frames</h2>\r\n                      </div>\r\n                      {data?.frames?.map((frame, index) => (\r\n                        <div key={index} className=\"w-full md:w-1/2 p-2\">\r\n                          <img\r\n                            src={`data:image/jpeg;base64,${frame.annotated_image}`}\r\n                            className=\"w-full h-auto\"\r\n                          />\r\n                          <table className=\"my-4\"\r\n                            style={{ tableLayout: \"fixed\", width: \"100%\" }}\r\n                          >\r\n                            <thead>\r\n                              <tr>\r\n                                <th style={{ textAlign: \"start\" }}>Instance</th>\r\n                                <th style={{ textAlign: \"start\" }}>\r\n                                  Flat area\r\n                                </th>\r\n                                <th style={{ textAlign: \"start\" }}>%</th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {frame.detection_results?.instances?.map(\r\n                                (result, index) => (\r\n                                  <tr key={index}>\r\n                                    <td style={{ textAlign: \"start\" }}>\r\n                                      {result.name}\r\n                                    </td>\r\n                                    <td style={{ textAlign: \"start\" }}>\r\n                                      {result.area}\r\n                                    </td>\r\n                                    <td style={{ textAlign: \"start\" }}>\r\n                                      {result.area_percentage}\r\n                                    </td>\r\n                                  </tr>\r\n                                )\r\n                              )}\r\n                            </tbody>\r\n                          </table>\r\n                          <hr className=\" border-gray-700\" />\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}